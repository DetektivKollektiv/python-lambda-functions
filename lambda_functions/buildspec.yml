version: 0.2

env:
  git-credential-helper: yes

batch:
  fast-fail: false
  build-list:
    - identifier: archive_service
      env:
        variables:
          LOCATION: "archive_service"
          STACK_NAME: "archive-service"
    - identifier: ml_service
      env:
        variables:
          LOCATION: "ml_service"
          STACK_NAME: "ml-service"
    - identifier: review_service
      env:
        variables:
          LOCATION: "review_service"
          STACK_NAME: "review-service"
    - identifier: submission_service
      env:
        variables:
          LOCATION: "submission_service"
          STACK_NAME: "submission-service"
    - identifier: user_service
      env:
        variables:
          LOCATION: "user_service"
          STACK_NAME: "user-service"

phases:
  install:
    runtime-versions:
      python: 3.8
      ruby: latest
    commands:
      # Upgrade pip to the latest version
      - echo $LOCATION
      - printenv
      - pip install --upgrade pip

      - pip uninstall -y awscli
      # Upgrade AWS CLI to the latest version
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install

      # - pip install --upgrade awscli

      # Install linter for CloudFormation template
      - pip install cfn-lint

      # Install cfn-nag
      - gem install cfn-nag

      # Install requirements
      - pip install -r "lambda_functions/${LOCATION}/requirements.txt" --target "lambda_functions/${LOCATION}"
      # - pip install -r lambda_layers/core_layer/requirements.txt --target lambda_layers/core_layer
      # - pip install -r lambda_layers/ml_requirements_layer/requirements_layers.txt --target lambda_layers/ml_requirements_layer

      # Install statelint to verify the validity of the state machine definition
      - gem install statelint

  pre_build:
    commands:
      # verify the validity of the state machine definition
      # TODO: Extra buildspec f√ºr stepfunction/submission service
      # - statelint ./lambda_functions/submission_service/stepfunctions/SearchFactChecks.asl.json
      # create template for stepfunction and add it to template.yaml
      # - python ./lambda_functions/submission_service/stepfunctions/template_statemachine_cf.py --smdef ./lambda_functions/submission_service/stepfunctions/SearchFactChecks.asl.json --intemplate ./lambda_functions/submission_service/submission_service_template.yaml --outtemplate ./lambda_functions/submission_service/submission_service_template.yaml
      - TEMPLATE_PATH="lambda_functions/${LOCATION}/template.yaml"
      - echo "Validating CloudFormation template file ${TEMPLATE_PATH}"
      - cfn-lint -t ${TEMPLATE_PATH}
      - cfn_nag_scan --input-path ${TEMPLATE_PATH}

      # - cfn-lint -t ./lambda_functions/template.yaml
      # - cfn_nag_scan -i ./lambda_functions -t template.yaml
      # Discover and run unit tests in the 'tests' directory. For more information, see <https://docs.python.org/3/library/unittest.html#test-discovery>
      # - python -m unittest discover lambda_functions/tests

  build:
    commands:
      # Use AWS SAM to package the application by using AWS CloudFormation
      - sed -i 's/VAR_HOSTEDZONEID/${HOSTEDZONEID}/g;s/VAR_CERTARN/${CERTARN}/g' ${STAGE}-params.json
      - aws cloudformation package
        --template-file ${TEMPLATE_PATH}
        --s3-bucket $S3_BUCKET
        --output-template-file ${STAGE}-template-export.yml
      - aws cloudformation deploy
        --template-file ${STAGE}-template-export.yml
        --stack-name detektivkollektiv-api-dev-${STACK_NAME}
        --s3-bucket $S3_BUCKET
        --parameter-overrides file://${STAGE}-params.json
        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
      #   - aws cloudformation create-change-set
      #   --stack-name detektivkollektiv-api-dev-${LOCATION}
      #   --change-set-name detektivkollektiv-api-changeset-dev-${LOCATION}
      #   --template-body file://${STAGE}-template-export.yml
      #   --role-arn arn:aws:iam::891514678401:role/codepipeline-api-dev
      #   --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
      #   # --parameters file://${STAGE}-config.json
      # - aws cloudformation execute-change-set
      #   --change-set-name detektivkollektiv-api-changeset-dev-${LOCATION}
      # Do not remove this statement. This command is required for AWS CodeStar projects.
      # Update the AWS Partition, AWS Region, account ID and project ID in the project ARN on template-configuration.json file so AWS CloudFormation can tag project resources.
# artifacts:
#   files:
#     - ${STAGE}-template-export.yml
#     - ${STAGE}-config.json
# - template-configuration.json
