AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "SAM template for the DetektivKollektiv user API" # Change for each template

Globals:
  Function:
    Timeout: 30
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  DEPLOYMENTMODE:
    Type: String
  STAGE:
    Type: String
  CorsAllowOrigin:
    Type: String
  DBNAME:
    Type: String
    Default: development_db

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: STAGE
      Cors:
        AllowMethods: "'OPTIONS, PUT, POST, GET, DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AWS_IAM
        AddDefaultAuthorizerToCorsPreflight: false
        InvokeRole: NONE

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "detektivkollektiv-user_api-execution-user-service-${STAGE}" # Change for each Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser


  LambdaIoTExecutionPolicy:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codetekt-user_api-iot-policy-execution-user-service-${STAGE}" # Change for each Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/AWSIoTFullAccess

  CreatUserFunction: # Change for each lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-create-user-${STAGE}" # Change for each lambda
      CodeUri: .
      Handler: create_user.create_user # Change for each lambda
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tracing: Active
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-delete_user-${STAGE}"
      CodeUri: .
      Handler: delete_user.delete_user
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        Echo:
          Type: Api
          Properties:
            Path: /
            Method: delete
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  GetUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-get_user-${STAGE}"
      CodeUri: .
      Handler: get_user.get_user
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        Echo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  GetUserRankingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-get_user_ranking-${STAGE}"
      CodeUri: .
      Handler: get_user_ranking.get_user_ranking
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        Echo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /ranking
            Method: get
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  AttachIoTPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-attach_iot_policy-${STAGE}"
      CodeUri: .
      Handler: attach_iot_policy.attach_iot_policy
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaIoTExecutionPolicy
          - Arn
      Events:
        Echo:
          Type: Api
          Properties:
            Path: /iot-policy
            Method: post
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  ConfirmMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-confirm-mail-${STAGE}" # Change for each lambda
      CodeUri: .
      Handler: mail_subscription.confirm_mail_subscription # Change for each lambda, syntax: python_file.function
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /mails/{mail_id}/confirm # Change for each lambda, syntax: db_table/id/name
            Method: get # Change for each lambda
            RestApiId:
              Ref: Api
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
          STAGE:
            Ref: STAGE
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"        

  UnsubsribeMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-unsubscribe-mail-${STAGE}" # Change for each lambda
      CodeUri: .
      Handler: mail_subscription.unsubscribe_mail # Change for each lambda, syntax: python_file.function
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /mails/{mail_id}/unsubscribe # Change for each lambda, syntax: db_table/id/name
            Method: get # Change for each lambda
            RestApiId:
              Ref: Api
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
          STAGE:
            Ref: STAGE
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"

  DeleteUnconfirmedMailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-user_api-delete-unconfirmed-mails-${STAGE}"
      CodeUri: .
      Handler: delete_unconfirmed_mails.delete_unconfirmed_mails
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Name: !Sub "detektivkollektiv-rules-delete-unconfirmed-mails-${STAGE}"
            Description: Schdule for starting deletion of unconfirmed mails every hour
            Enabled: True
            Schedule: rate(1 hour)
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"