AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "SAM template for the DetektivKollektiv submission API" # Change for each template

Globals:
  Function:
    Timeout: 30
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  DEPLOYMENTMODE:
    Type: String
  STAGE:
    Type: String
  CorsAllowOrigin:
    Type: String
  DBNAME:
    Type: String
    Default: development_db

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: STAGE
      Cors:
        AllowMethods: "'OPTIONS, PUT, POST, GET, DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AWS_IAM
        AddDefaultAuthorizerToCorsPreflight: false
        InvokeRole: NONE

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "detektivkollektiv-api-execution-submission-service-${STAGE}" # Change for each Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonSESFullAccess

  SubmitItemFunction: # Change for each lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-submission_api-submit-item-${STAGE}" # Change for each lambda
      CodeUri: .
      Handler: submit_item.submit_item # Change for each lambda
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /items # Change for each lambda
            Method: post # Change for each lambda
            RestApiId:
              Ref: Api
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
          STAGE:
            Ref: STAGE
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-ml-requirements-${STAGE}:1"


  GetItemTypesFunction: # Change for each lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "detektivkollektiv-submission_api-get-item-types-${STAGE}" # Change for each lambda
      CodeUri: .
      Handler: get_item_types.get_item_types # Change for each lambda
      Runtime: python3.10
      MemorySize: 832
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /itemTypes # Change for each lambda
            Method: get # Change for each lambda
            RestApiId:
              Ref: Api
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          DEPLOYMENTMODE:
            Ref: DEPLOYMENTMODE
          DBNAME:
            Ref: DBNAME
          CORS_ALLOW_ORIGIN:
            Ref: CorsAllowOrigin
          STAGE:
            Ref: STAGE
      Layers:
        - !Sub "arn:aws:lambda:eu-central-1:891514678401:layer:detektivkollektiv-core-layer-${STAGE}:1"